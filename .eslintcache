[{"/src/src/index.tsx":"1","/src/src/reportWebVitals.ts":"2","/src/src/App.tsx":"3","/src/src/modules/api/index.ts":"4","/src/src/modules/api/configuration.ts":"5","/src/src/modules/api/api.ts":"6"},{"size":1184,"mtime":1610898361585,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1610756368778,"results":"9","hashOfConfig":"8"},{"size":556,"mtime":1610756368773,"results":"10","hashOfConfig":"8"},{"size":355,"mtime":1610895524864,"results":"11","hashOfConfig":"8"},{"size":1623,"mtime":1610895524941,"results":"12","hashOfConfig":"8"},{"size":79550,"mtime":1610897339485,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18iu5i4",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},"/src/src/index.tsx",[],"/src/src/reportWebVitals.ts",[],["28","29"],"/src/src/App.tsx",[],"/src/src/modules/api/index.ts",[],"/src/src/modules/api/configuration.ts",[],"/src/src/modules/api/api.ts",["30","31","32","33","34","35","36","37","38","39"],"/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * Snippets API\n * Test description\n *\n * OpenAPI spec version: v1\n * Contact: contact@snippets.local\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nimport * as url from \"url\";\nimport * as portableFetch from \"portable-fetch\";\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"http://back:5000\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration?: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name!: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface Article\n */\nexport interface Article {\n    /**\n     * \n     * @type {number}\n     * @memberof Article\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Article\n     */\n    description: string;\n    /**\n     * \n     * @type {Date}\n     * @memberof Article\n     */\n    createdAt?: Date;\n    /**\n     * \n     * @type {Date}\n     * @memberof Article\n     */\n    updatedAt?: Date;\n    /**\n     * \n     * @type {Date}\n     * @memberof Article\n     */\n    deletedAt?: Date;\n    /**\n     * \n     * @type {string}\n     * @memberof Article\n     */\n    title: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Article\n     */\n    createUser?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Article\n     */\n    updateUser?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Article\n     */\n    deleteUser?: number;\n}\n\n/**\n * \n * @export\n * @interface AuthToken\n */\nexport interface AuthToken {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthToken\n     */\n    username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthToken\n     */\n    password: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthToken\n     */\n    token?: string;\n}\n\n/**\n * \n * @export\n * @interface Group\n */\nexport interface Group {\n    /**\n     * \n     * @type {string}\n     * @memberof Group\n     */\n    url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Group\n     */\n    name: string;\n}\n\n/**\n * \n * @export\n * @interface InlineResponse200\n */\nexport interface InlineResponse200 {\n    /**\n     * \n     * @type {number}\n     * @memberof InlineResponse200\n     */\n    count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InlineResponse200\n     */\n    next?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof InlineResponse200\n     */\n    previous?: string;\n    /**\n     * \n     * @type {Array<Article>}\n     * @memberof InlineResponse200\n     */\n    results: Array<Article>;\n}\n\n/**\n * \n * @export\n * @interface InlineResponse2001\n */\nexport interface InlineResponse2001 {\n    /**\n     * \n     * @type {number}\n     * @memberof InlineResponse2001\n     */\n    count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InlineResponse2001\n     */\n    next?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof InlineResponse2001\n     */\n    previous?: string;\n    /**\n     * \n     * @type {Array<Group>}\n     * @memberof InlineResponse2001\n     */\n    results: Array<Group>;\n}\n\n/**\n * \n * @export\n * @interface InlineResponse2002\n */\nexport interface InlineResponse2002 {\n    /**\n     * \n     * @type {number}\n     * @memberof InlineResponse2002\n     */\n    count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof InlineResponse2002\n     */\n    next?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof InlineResponse2002\n     */\n    previous?: string;\n    /**\n     * \n     * @type {Array<User>}\n     * @memberof InlineResponse2002\n     */\n    results: Array<User>;\n}\n\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    url?: string;\n    /**\n     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.\n     * @type {string}\n     * @memberof User\n     */\n    username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    password: string;\n    /**\n     * The groups this user belongs to. A user will get all permissions granted to each of their groups.\n     * @type {Array<string>}\n     * @memberof User\n     */\n    groups?: Array<string>;\n}\n\n\n/**\n * ApiApi - fetch parameter creator\n * @export\n */\nexport const ApiApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesCreate(data: Article, options: any = {}): FetchArgs {\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiArticlesCreate.');\n            }\n            const localVarPath = `/api/articles/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Article\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesDelete(id: number, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiArticlesDelete.');\n            }\n            const localVarPath = `/api/articles/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesList(page?: number, options: any = {}): FetchArgs {\n            const localVarPath = `/api/articles/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesPartialUpdate(id: number, data: Article, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiArticlesPartialUpdate.');\n            }\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiArticlesPartialUpdate.');\n            }\n            const localVarPath = `/api/articles/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Article\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesRead(id: number, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiArticlesRead.');\n            }\n            const localVarPath = `/api/articles/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesUpdate(id: number, data: Article, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiArticlesUpdate.');\n            }\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiArticlesUpdate.');\n            }\n            const localVarPath = `/api/articles/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Article\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsCreate(data: Group, options: any = {}): FetchArgs {\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiGroupsCreate.');\n            }\n            const localVarPath = `/api/groups/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Group\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsDelete(id: number, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiGroupsDelete.');\n            }\n            const localVarPath = `/api/groups/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsList(page?: number, options: any = {}): FetchArgs {\n            const localVarPath = `/api/groups/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsPartialUpdate(id: number, data: Group, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiGroupsPartialUpdate.');\n            }\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiGroupsPartialUpdate.');\n            }\n            const localVarPath = `/api/groups/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Group\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsRead(id: number, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiGroupsRead.');\n            }\n            const localVarPath = `/api/groups/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsUpdate(id: number, data: Group, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiGroupsUpdate.');\n            }\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiGroupsUpdate.');\n            }\n            const localVarPath = `/api/groups/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Group\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersCreate(data: User, options: any = {}): FetchArgs {\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiUsersCreate.');\n            }\n            const localVarPath = `/api/users/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersDelete(id: number, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiUsersDelete.');\n            }\n            const localVarPath = `/api/users/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersList(page?: number, options: any = {}): FetchArgs {\n            const localVarPath = `/api/users/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersPartialUpdate(id: number, data: User, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiUsersPartialUpdate.');\n            }\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiUsersPartialUpdate.');\n            }\n            const localVarPath = `/api/users/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersRead(id: number, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiUsersRead.');\n            }\n            const localVarPath = `/api/users/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersUpdate(id: number, data: User, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiUsersUpdate.');\n            }\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiUsersUpdate.');\n            }\n            const localVarPath = `/api/users/{id}/`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ApiApi - functional programming interface\n * @export\n */\nexport const ApiApiFp = function (configuration?: Configuration) {\n    return {\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesCreate(data: Article, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Article> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiArticlesCreate(data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiArticlesDelete(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesList(page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiArticlesList(page, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesPartialUpdate(id: number, data: Article, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Article> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiArticlesPartialUpdate(id, data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesRead(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Article> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiArticlesRead(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesUpdate(id: number, data: Article, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Article> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiArticlesUpdate(id, data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsCreate(data: Group, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Group> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiGroupsCreate(data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiGroupsDelete(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsList(page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiGroupsList(page, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsPartialUpdate(id: number, data: Group, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Group> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiGroupsPartialUpdate(id, data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsRead(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Group> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiGroupsRead(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsUpdate(id: number, data: Group, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Group> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiGroupsUpdate(id, data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersCreate(data: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiUsersCreate(data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiUsersDelete(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersList(page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiUsersList(page, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersPartialUpdate(id: number, data: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiUsersPartialUpdate(id, data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersRead(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiUsersRead(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersUpdate(id: number, data: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).apiUsersUpdate(id, data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * ApiApi - factory interface\n * @export\n */\nexport const ApiApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesCreate(data: Article, options?: any) {\n            return ApiApiFp(configuration).apiArticlesCreate(data, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesDelete(id: number, options?: any) {\n            return ApiApiFp(configuration).apiArticlesDelete(id, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesList(page?: number, options?: any) {\n            return ApiApiFp(configuration).apiArticlesList(page, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesPartialUpdate(id: number, data: Article, options?: any) {\n            return ApiApiFp(configuration).apiArticlesPartialUpdate(id, data, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesRead(id: number, options?: any) {\n            return ApiApiFp(configuration).apiArticlesRead(id, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this article.\n         * @param {Article} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiArticlesUpdate(id: number, data: Article, options?: any) {\n            return ApiApiFp(configuration).apiArticlesUpdate(id, data, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsCreate(data: Group, options?: any) {\n            return ApiApiFp(configuration).apiGroupsCreate(data, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsDelete(id: number, options?: any) {\n            return ApiApiFp(configuration).apiGroupsDelete(id, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsList(page?: number, options?: any) {\n            return ApiApiFp(configuration).apiGroupsList(page, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsPartialUpdate(id: number, data: Group, options?: any) {\n            return ApiApiFp(configuration).apiGroupsPartialUpdate(id, data, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsRead(id: number, options?: any) {\n            return ApiApiFp(configuration).apiGroupsRead(id, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows groups to be viewed or edited.\n         * @param {number} id A unique integer value identifying this group.\n         * @param {Group} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiGroupsUpdate(id: number, data: Group, options?: any) {\n            return ApiApiFp(configuration).apiGroupsUpdate(id, data, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersCreate(data: User, options?: any) {\n            return ApiApiFp(configuration).apiUsersCreate(data, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersDelete(id: number, options?: any) {\n            return ApiApiFp(configuration).apiUsersDelete(id, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} [page] A page number within the paginated result set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersList(page?: number, options?: any) {\n            return ApiApiFp(configuration).apiUsersList(page, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersPartialUpdate(id: number, data: User, options?: any) {\n            return ApiApiFp(configuration).apiUsersPartialUpdate(id, data, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersRead(id: number, options?: any) {\n            return ApiApiFp(configuration).apiUsersRead(id, options)(fetch, basePath);\n        },\n        /**\n         * API endpoint that allows users to be viewed or edited.\n         * @param {number} id A unique integer value identifying this user.\n         * @param {User} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiUsersUpdate(id: number, data: User, options?: any) {\n            return ApiApiFp(configuration).apiUsersUpdate(id, data, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * ApiApi - object-oriented interface\n * @export\n * @class ApiApi\n * @extends {BaseAPI}\n */\nexport class ApiApi extends BaseAPI {\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {Article} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiArticlesCreate(data: Article, options?: any) {\n        return ApiApiFp(this.configuration).apiArticlesCreate(data, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} id A unique integer value identifying this article.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiArticlesDelete(id: number, options?: any) {\n        return ApiApiFp(this.configuration).apiArticlesDelete(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} [page] A page number within the paginated result set.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiArticlesList(page?: number, options?: any) {\n        return ApiApiFp(this.configuration).apiArticlesList(page, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} id A unique integer value identifying this article.\n     * @param {Article} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiArticlesPartialUpdate(id: number, data: Article, options?: any) {\n        return ApiApiFp(this.configuration).apiArticlesPartialUpdate(id, data, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} id A unique integer value identifying this article.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiArticlesRead(id: number, options?: any) {\n        return ApiApiFp(this.configuration).apiArticlesRead(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} id A unique integer value identifying this article.\n     * @param {Article} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiArticlesUpdate(id: number, data: Article, options?: any) {\n        return ApiApiFp(this.configuration).apiArticlesUpdate(id, data, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows groups to be viewed or edited.\n     * @param {Group} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiGroupsCreate(data: Group, options?: any) {\n        return ApiApiFp(this.configuration).apiGroupsCreate(data, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows groups to be viewed or edited.\n     * @param {number} id A unique integer value identifying this group.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiGroupsDelete(id: number, options?: any) {\n        return ApiApiFp(this.configuration).apiGroupsDelete(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows groups to be viewed or edited.\n     * @param {number} [page] A page number within the paginated result set.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiGroupsList(page?: number, options?: any) {\n        return ApiApiFp(this.configuration).apiGroupsList(page, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows groups to be viewed or edited.\n     * @param {number} id A unique integer value identifying this group.\n     * @param {Group} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiGroupsPartialUpdate(id: number, data: Group, options?: any) {\n        return ApiApiFp(this.configuration).apiGroupsPartialUpdate(id, data, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows groups to be viewed or edited.\n     * @param {number} id A unique integer value identifying this group.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiGroupsRead(id: number, options?: any) {\n        return ApiApiFp(this.configuration).apiGroupsRead(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows groups to be viewed or edited.\n     * @param {number} id A unique integer value identifying this group.\n     * @param {Group} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiGroupsUpdate(id: number, data: Group, options?: any) {\n        return ApiApiFp(this.configuration).apiGroupsUpdate(id, data, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {User} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiUsersCreate(data: User, options?: any) {\n        return ApiApiFp(this.configuration).apiUsersCreate(data, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} id A unique integer value identifying this user.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiUsersDelete(id: number, options?: any) {\n        return ApiApiFp(this.configuration).apiUsersDelete(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} [page] A page number within the paginated result set.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiUsersList(page?: number, options?: any) {\n        return ApiApiFp(this.configuration).apiUsersList(page, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} id A unique integer value identifying this user.\n     * @param {User} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiUsersPartialUpdate(id: number, data: User, options?: any) {\n        return ApiApiFp(this.configuration).apiUsersPartialUpdate(id, data, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} id A unique integer value identifying this user.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiUsersRead(id: number, options?: any) {\n        return ApiApiFp(this.configuration).apiUsersRead(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * API endpoint that allows users to be viewed or edited.\n     * @param {number} id A unique integer value identifying this user.\n     * @param {User} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiApi\n     */\n    public apiUsersUpdate(id: number, data: User, options?: any) {\n        return ApiApiFp(this.configuration).apiUsersUpdate(id, data, options)(this.fetch, this.basePath);\n    }\n\n}\n\n/**\n * ApiTokenAuthApi - fetch parameter creator\n * @export\n */\nexport const ApiTokenAuthApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {AuthToken} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTokenAuthCreate(data: AuthToken, options: any = {}): FetchArgs {\n            // verify required parameter 'data' is not null or undefined\n            if (data === null || data === undefined) {\n                throw new RequiredError('data', 'Required parameter data was null or undefined when calling apiTokenAuthCreate.');\n            }\n            const localVarPath = `/api-token-auth/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Basic required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"AuthToken\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(data || {}) : (data || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ApiTokenAuthApi - functional programming interface\n * @export\n */\nexport const ApiTokenAuthApiFp = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {AuthToken} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTokenAuthCreate(data: AuthToken, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AuthToken> {\n            const localVarFetchArgs = ApiTokenAuthApiFetchParamCreator(configuration).apiTokenAuthCreate(data, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * ApiTokenAuthApi - factory interface\n * @export\n */\nexport const ApiTokenAuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {AuthToken} data \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiTokenAuthCreate(data: AuthToken, options?: any) {\n            return ApiTokenAuthApiFp(configuration).apiTokenAuthCreate(data, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * ApiTokenAuthApi - object-oriented interface\n * @export\n * @class ApiTokenAuthApi\n * @extends {BaseAPI}\n */\nexport class ApiTokenAuthApi extends BaseAPI {\n    /**\n     * \n     * @param {AuthToken} data \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ApiTokenAuthApi\n     */\n    public apiTokenAuthCreate(data: AuthToken, options?: any) {\n        return ApiTokenAuthApiFp(this.configuration).apiTokenAuthCreate(data, options)(this.fetch, this.basePath);\n    }\n\n}\n\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":359,"column":41,"nodeType":"46","messageId":"47","endLine":359,"endColumn":55},{"ruleId":"44","severity":1,"message":"45","line":469,"column":41,"nodeType":"46","messageId":"47","endLine":469,"endColumn":55},{"ruleId":"44","severity":1,"message":"45","line":546,"column":41,"nodeType":"46","messageId":"47","endLine":546,"endColumn":55},{"ruleId":"44","severity":1,"message":"45","line":583,"column":41,"nodeType":"46","messageId":"47","endLine":583,"endColumn":53},{"ruleId":"44","severity":1,"message":"45","line":693,"column":41,"nodeType":"46","messageId":"47","endLine":693,"endColumn":53},{"ruleId":"44","severity":1,"message":"45","line":770,"column":41,"nodeType":"46","messageId":"47","endLine":770,"endColumn":53},{"ruleId":"44","severity":1,"message":"45","line":807,"column":41,"nodeType":"46","messageId":"47","endLine":807,"endColumn":52},{"ruleId":"44","severity":1,"message":"45","line":917,"column":41,"nodeType":"46","messageId":"47","endLine":917,"endColumn":52},{"ruleId":"44","severity":1,"message":"45","line":994,"column":41,"nodeType":"46","messageId":"47","endLine":994,"endColumn":52},{"ruleId":"44","severity":1,"message":"45","line":1769,"column":41,"nodeType":"46","messageId":"47","endLine":1769,"endColumn":57},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"@typescript-eslint/consistent-type-assertions","Use 'as any' instead of '<any>'.","TSTypeAssertion","as","no-global-assign","no-unsafe-negation"]